// A type scaling utility $type-scale map with the predefined values

// Each loop that outputs all of the type scales as placeholders with their
// type-prefix.
// ex. %t-tiny, %t-small
@each $scale in map-keys($type-scale) {
  %#{$type-prefix}#{$scale} {
    @include adjust-font-size-to (
        map-fetch($type-scale, $scale font-size),
        map-fetch($type-scale, $scale base-lines)
    );
  }
}

// A mixin for using type scale
// Parameters:
// $scale (tiny, small...)
// $extend (boolean) - true by default, if needed inside media query use false
//   to @include the content instead of @extend
// ex. @include type-scale(small) or @include type-scale(small, false) for use
//   inside media queries.
@mixin type-scale($scale, $extend: true, $map: $type-scale) {
  @if $extend {
    @extend %#{$type-prefix}#{$scale};
  }
  @else {
    @include adjust-font-size-to(
        map-fetch($map, $scale font-size),
        map-fetch($map, $scale base-lines)
    );
  }
}

// A simple type-weight mixin
// ex. @include type-weight(strong);
@mixin type-weight($weight) {
  font-weight: map-get($type-weight, $weight);
}

// A quick ligature mixin, to be updated with a more modular one
@mixin type-ligatures() {
  -moz-font-feature-settings: "liga=1, dlig=1";
  -ms-font-feature-settings: "liga", "dlig";
  -webkit-font-feature-settings: "liga", "dlig";
  -o-font-feature-settings: "liga", "dlig";
    font-feature-settings: "liga", "dlig";
}
